// Generated by CoffeeScript 1.3.3
(function() {
  var ls, lstat, onchange, set, watch;

  set = function(items) {
    var mapped;
    mapped = {};
    items.forEach(function(x) {
      return mapped[x] = x;
    });
    return mapped;
  };

  ls = function(dirpath, next) {
    return fs.readdir(dirpath, function(err, names) {
      names = names != null ? names : [];
      return next(names.map(function(name) {
        return join(dirpath, name);
      }));
    });
  };

  lstat = function(path, next) {
    return fs.lstat(path, function(e, stat) {
      return next(null, [path, stat != null ? stat : {}]);
    });
  };

  onchange = function(path, next) {
    return fs.watch(path, function(e) {
      if (e !== 'rename') {
        return next(path);
      }
    });
  };

  watch = function(dirpath, opts) {
    var add_entry, by_path, by_stat, delete_entry, next, onadded, onchanged, ondeleted, onrenamed, rename_entry, scan_directory, select, watchers, _ref, _ref1, _ref2, _ref3, _ref4;
    if (typeof opts === 'function') {
      next = opts;
      opts = {
        ondeleted: function(x) {
          return next({
            deleted: x
          });
        },
        onchanged: function(x) {
          return next({
            changed: x
          });
        },
        onadded: function(x) {
          return next({
            added: x
          });
        },
        onrenamed: function(x, y) {
          return next({
            renamed: [x, y]
          });
        }
      };
    }
    ondeleted = (_ref = opts.ondeleted) != null ? _ref : function() {};
    onchanged = (_ref1 = opts.onchanged) != null ? _ref1 : function() {};
    onadded = (_ref2 = opts.onadded) != null ? _ref2 : function() {};
    select = (_ref3 = opts.select) != null ? _ref3 : function() {
      return true;
    };
    onrenamed = (_ref4 = opts.onrenamed) != null ? _ref4 : function() {};
    by_path = {};
    by_stat = {};
    add_entry = function(path, ino) {
      by_stat[ino] = path;
      return by_path[path] = ino;
    };
    delete_entry = function(path, ino) {
      delete by_stat[ino];
      return delete by_path[path];
    };
    rename_entry = function(path, ino) {
      by_stat[ino] = path;
      return by_path[path] = ino;
    };
    watchers = [];
    scan_directory = function() {
      return ls(dirpath, function(paths) {
        paths = paths.filter(function(p) {
          return select(p);
        });
        return async.map(paths, lstat, function(e, statted) {
          var ino, mapping, path, _results;
          watchers.forEach(function(w) {
            return w.close();
          });
          watchers = [];
          statted.forEach(function(_arg) {
            var ino, path, _ref5;
            path = _arg[0], (_ref5 = _arg[1], ino = _ref5.ino);
            watchers.push(fs.watch(path, function(e) {
              if (e !== 'rename') {
                return onchanged(path);
              }
            }));
            if (!(ino in by_stat)) {
              add_entry(path, ino);
              return onadded(path);
            } else if (by_stat[ino] !== path) {
              onrenamed(by_stat[ino], path);
              return rename_entry(path, ino);
            }
          });
          mapping = set(statted.map(function(_arg) {
            var ino, _, _ref5;
            _ = _arg[0], (_ref5 = _arg[1], ino = _ref5.ino);
            return ino;
          }));
          _results = [];
          for (ino in by_stat) {
            path = by_stat[ino];
            if (!(ino in mapping)) {
              delete_entry(path, ino);
              _results.push(ondeleted(path));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      });
    };
    fs.watch(dirpath, scan_directory);
    return scan_directory();
  };

  module.exports = watch;

}).call(this);
